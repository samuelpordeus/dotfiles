#!/bin/bash
# USAGE: rmb
#
# Nukes stale branches both locally and remotely.

current_branch=$(git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')
if [ "$current_branch" != "master" ]; then
  printf "\e[33mYou are on branch $current_branch, NOT master.\e[39m\n"
  git checkout master
fi

echo "Fetching merged branches..."
git remote prune origin

local_branches=$(git branch --merged | grep -v 'master$')
if [ -n "$local_branches" ]; then
  printf "\n\e[31mRemoving the following LOCAL branches:\e[39m\n"
  echo "$local_branches"
  read -p "Continue? (y/n): " -n 1 choice
  echo
  if [ "$choice" == "y" ] || [ "$choice" == "Y" ]; then
    git branch -d `git branch --merged | grep -v 'master$' | sed 's/origin\///g' | tr -d '\n'`
  fi
fi

squashed_branches=$(git for-each-ref refs/heads/ "--format=%(refname:short)" | while read branch; do mergeBase=$(git merge-base master $branch) && [[ $(git cherry master $(git commit-tree $(git rev-parse $branch^{tree}) -p $mergeBase -m _)) == "-"* ]] && echo "$branch"; done)
if [ -n "$squashed_branches" ]; then
  printf "\n\e[31mRemoving the following LOCAL branches (Squashed and Merged on remote):\e[39m\n"
  echo "$squashed_branches"
  read -p "Continue? (y/n): " -n 1 choice
  echo
  if [ "$choice" == "y" ] || [ "$choice" == "Y" ]; then
    echo $squashed_branches | xargs git branch -D
  fi
fi

remote_branches=$(git branch -r --merged | grep -v '/master$')
if [ -n "$remote_branches" ]; then
  printf "\n\e[31mRemoving the following REMOTE branches:\e[39m\n"
  echo "$remote_branches"
  read -p "Continue? (y/n): " -n 1 choice
  echo
  if [ "$choice" == "y" ] || [ "$choice" == "Y" ]; then
    git push origin `git branch -r --merged | grep -v '/master$' | sed 's/origin\//:/g' | tr -d '\n'`
  fi
fi

printf "\n\e[32mYour current LOCAL branches are:\e[39m\n"
git for-each-ref --sort=committerdate refs/heads/ --format='%(HEAD) %(refname:short) - %(color:yellow)%(committerdate:relative)%(color:reset)'
